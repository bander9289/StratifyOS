

option(SOS_LIB_VERBOSE "Create Verbose Makefiles" OFF)

set(SOS_BUILD_ARCH ${SOS_LIB_ARCH})
include(${SOS_TOOLCHAIN_CMAKE_PATH}/sos-build-flags.cmake)
include(${SOS_TOOLCHAIN_CMAKE_PATH}/sos-sdk.cmake)
sos_get_git_hash()

if(SOS_LIB_VERBOSE)
	set(CMAKE_VERBOSE_MAKEFILE 1)
endif()

set(SUFFIX "")

if(SOS_LIB_OPTION)
	set(SUFFIX _${SOS_LIB_OPTION})
	set(LIB_OPTION_DEFINE __${SOS_LIB_OPTION})
elseif()
	set(LIB_OPTION_DEFINE __no_sos_lib_option)
endif()

if(SOS_LIB_TYPE)
	if(NOT ${SOS_LIB_TYPE} STREQUAL release )
		set(SUFFIX ${SUFFIX}_${SOS_LIB_TYPE})
	endif()
endif()


if(SOS_LIB_OPTIMIZATION)
	set(BUILD_OPTIMIZATION ${SOS_LIB_OPTIMIZATION})
else()
	set(BUILD_OPTIMIZATION "-Os")
endif()

set(BUILD_FLAGS ${SOS_LIB_BUILD_FLAGS} ${SOS_BUILD_FLOAT_OPTIONS} ${BUILD_OPTIMIZATION})

set(BUILD_LIBRARY_INSTALL_NAME ${SOS_LIB_NAME}${SUFFIX})
set(BUILD_LIBRARY_TARGET ${BUILD_LIBRARY_INSTALL_NAME}_${SOS_BUILD_ARCH})
if(SOS_LIB_INCLUDE_DIRECTORIES)
	include_directories(${SOS_LIB_INCLUDE_DIRECTORIES})
endif()

add_library(${BUILD_LIBRARY_TARGET} STATIC ${SOS_LIB_SOURCELIST})
target_compile_definitions(${BUILD_LIBRARY_TARGET} PUBLIC ${LIB_OPTION_DEFINE} __${SOS_LIB_TYPE} __${SOS_BUILD_ARCH} ${SOS_LIB_DEFINITIONS} MCU_SOS_GIT_HASH=${SOS_GIT_HASH})
target_compile_options(${BUILD_LIBRARY_TARGET} PUBLIC ${BUILD_FLAGS})
install(FILES ${PROJECT_BINARY_DIR}/lib${BUILD_LIBRARY_TARGET}.a DESTINATION lib/${SOS_BUILD_INSTALL_DIR}/${SOS_BUILD_FLOAT_DIR} RENAME lib${BUILD_LIBRARY_INSTALL_NAME}.a)


if(SOS_LIB_INCLUDE_DIRECTORIES)
	target_include_directories(${BUILD_LIBRARY_TARGET} PUBLIC ${SOS_LIB_INCLUDE_DIRECTORIES})
endif()

target_include_directories(${BUILD_LIBRARY_TARGET} PUBLIC ${SOS_BUILD_SYSTEM_INCLUDES})
